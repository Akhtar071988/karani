package com.ashok.projecteuler.problems;

import java.util.Arrays;

/**
 * Problem: Distinct Powers
 * Link: https://projecteuler.net/problem=29
 * <p>
 * Description:
 * Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * <p>
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * <p>
 * If they are then placed in numerical order, with any repeats removed,
 * we get the following sequence of 15 distinct terms:
 * <p>
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * <p>
 * How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 *
 * @author Ashok Rajpurohit (ashok1113@gmail.com).
 */
public class P029 {
    public static int solve(int start, int end) {
        boolean[] map = new boolean[end + 1];
        Arrays.fill(map, true);

        int res = 0;
        for (int i = start; i <= end; i++) {
            if (!map[i])
                continue;

            res += getDistinctPowersForBase(i, end, start);

            int j = i;
            while (j <= end) {
                map[j] = false;
                j *= i;
            }
        }

        return res;
    }

    private static int getDistinctPowersForBase(final int start, final int end, final int powerStart) {
        int size = maxPowerPossible(start, end);
        boolean[] powerMap = new boolean[size + 1];

        for (int i = start, j = 1; i <= end; i *= start, j++) {
            for (int k = powerStart; k <= end; k++)
                powerMap[j * k] = true;
        }

        int count = 0;
        for (boolean b : powerMap)
            if (b)
                count++;

        return count;
    }

    /**
     * Max power of a which is less than or equal to b ^ b.
     * The result may be 1 larger than to offset the integer conversion.
     *
     * @param a
     * @param b
     * @return
     */
    private static int maxPowerPossible(int a, int b) {
        return (int) (1 + b * Math.log(b) / Math.log(a));
    }
}
